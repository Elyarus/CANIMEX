{"version":3,"sources":["post_put_anime.js"],"names":["document","addEventListener","formNuevoAnime","regeneratorRuntime","async","_context2","prev","next","getElementById","event","idAnime","titulo","genero","duracion","imagen","method","animeData","options","response","_context","preventDefault","value","files","getAttribute","abrupt","alert","awrap","fetch","sent","json","status","headers","Error","body","location","reload","t0","console","error","stop"],"mappings":"aACAA,SAASC,iBAAiB,mBAAoB,WAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,GAD9CL,EAAAF,SAAAQ,eAAA,mBAC8CP,iBAAA,SAAA,SAAAQ,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAf,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,GAAAE,EAAAW,iBAShCV,EAAUV,SAASQ,eAAe,MAAMa,MANlDnB,EAAAA,SAAeD,eAAiB,UAAUoB,MAAAT,EAAAZ,SAAAQ,eAAA,UAAAa,MAAAR,EAAAb,SAAAQ,eAAA,YAAAa,MAAAP,EAAAd,SAAAQ,eAAA,UAAAc,MAAA,IAAAtB,SAAAQ,eAAA,UAAAe,aAAA,sBACtC,KAAAZ,GAAA,KAAAC,GAAA,KAAAC,GAAA,KAAAC,EAJsC,OAKtCL,MAAAA,qCALsCU,EAAAK,OAAA,UAAAL,EAAAZ,KAAA,GAAA,MAAA,KAAA,GAAA,MAoB5B,mCAXJG,EAAAA,OAGAG,EAAAA,CACAC,OAAAA,EACNF,OAAAA,EAaIC,SAAUA,EAxBwBC,OAAAA,EAalCH,MAbkCD,IA6B9BM,EAAUN,QAAUA,EAfxBe,EAAK,OAILV,EAAAA,CAkBAA,OAAQA,EAfNC,QAAAA,CACFL,eAAQA,oBAERE,KAAAA,KAAAA,UAAUA,IA3BwBM,EAAAb,KAAA,GAAAa,EAAAZ,KAAA,GAAAJ,mBAAAuB,MA+BrBC,MAXP,mCAWOV,IA/BqB,KAAA,GAAA,IA+BlCC,EA/BkCC,EAAAS,MAgC9BZ,GAhC8B,CAAAG,EAAAZ,KAAA,GAAA,MAAA,MAiC9BQ,IAAAA,MAAS,6BAjCqB,KAAA,GAAA,OAAAI,EAAAZ,KAAA,GAAAJ,mBAAAuB,MAqCtCR,EAAAW,QArCsC,KAAA,GAAA,GAAAV,EAAAS,KAsDnB,SAAXb,EAtD8B,CAAAI,EAAAZ,KAAA,GAAA,MAAA,GAsCtB,MACZQ,EAAMe,OAvC4B,MAwClCC,MAAAA,6BACI,IAAAC,MAAA,6BAzC8Bb,EAAAZ,KAAA,GAAA,MAAA,KAAA,GA2ClC0B,MAAAA,gCA3CkCd,EAAAZ,KAAA,GAAA,MAAA,KAAA,GAAA,GAGA,MAAAW,EAAAY,OAHA,MAGAL,MAAA,+BAAA,IAAAO,MAAA,+BAHAb,EAAAZ,KAAA,GAAA,MAAA,KAAA,GAGAkB,MAAA,kCAHA,KAAA,GAGAvB,EA6C7BgB,QA7C6BgB,SAAAC,SAHAhB,EAAAZ,KAAA,GAAA,MAAA,KAAA,GAAAY,EAAAb,KAAA,GAAAa,EAAAiB,GAAAjB,EAAA,MAAA,IAGAkB,QAAAC,MAAA,SAAAnB,EAAAiB,IAuElCX,MAAM,6BA1E4B,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAoB,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,QAAA,KAAA,EAAA,IAAA,MAAA,OAAAlC,EAAAkC","file":"post_put_anime.min.js","sourcesContent":["// cuando el dom se cargue\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n    const formNuevoAnime = document.getElementById('formNuevoAnime');\r\n    //agrego el evento submit al formulario\r\n    formNuevoAnime.addEventListener('submit', async (event) => {\r\n        //prevengo el comportamiento por defecto del formulario\r\n        event.preventDefault();\r\n        //obtengo los datos del formulario\r\n        // const formData = new FormData(formNuevoAnime);\r\n        //obtengo los valores de los inputs\r\n        const idAnime = document.getElementById('id').value;\r\n        const titulo = document.getElementById('titulo').value;\r\n        const genero = document.getElementById('genero').value;\r\n        const duracion = document.getElementById('duracion').value;\r\n        const imagen = document.getElementById('imagen').files[0] || document.getElementById('imagen').getAttribute('data-current-image');\r\n        ;\r\n        //valido los inputs\r\n        if (titulo === '' || genero === '' || duracion === '' || imagen === '') {\r\n            alert('Todos los campos son obligatorios');\r\n            return;\r\n        }\r\n        let url = 'http://localhost:8080/api/animes';\r\n        let method = 'POST';\r\n\r\n        // construir el objeto con los datos del anime\r\n        const animeData = {\r\n            titulo: titulo,\r\n            genero: genero,\r\n            duracion: duracion,\r\n            imagen: imagen.name \r\n        };\r\n             // Si hay un ID de película (es una modificación), incluirlo en el objeto movieData\r\n            if (idAnime) {\r\n                animeData.idAnime = idAnime;\r\n                method = 'PUT';\r\n            }\r\n        // levanto solo el nombre del file para enviarlo a la api\r\n        // const imageName = imagen.name;\r\n        //configuracion de options, es un post y necesita body\r\n        const options = {\r\n            method: method,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(animeData)\r\n        };\r\n        //realizo la peticion fetch a la api para agregar una pelicula\r\n        try {\r\n            const response = await fetch(url, options);\r\n            if (!response.ok) {\r\n                throw new Error('Error al guardar el anime');\r\n            }\r\n\r\n            const responseData = await response.json();\r\n\r\n            if (method === 'POST') {\r\n                // si el codigo es 201 la pelicula se creo correctamente\r\n                if (response.status !== 201) {\r\n                    alert('Error al guardar el anime');\r\n                    throw new Error('Error al guardar el anime');\r\n                }\r\n                alert('Anime agregado correctamente')\r\n            } else {\r\n                // si el codigo es 200, el anime se modifico correctamente\r\n                if (response.status !== 200) {\r\n                    alert('Error al modificar el anime');\r\n                    throw new Error('Error al modificar el anime');\r\n                }\r\n                alert('Anime modificado correctamente');\r\n            }\r\n\r\n            formNuevoAnime.reset();\r\n            location.reload(); //recargar la pagina para mostrar los cambios\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            alert('Error al guardar el anime');\r\n        }\r\n    });\r\n\r\n});"]}